{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","containers/ContactData/ContactData.module.css","containers/ContactData/ContactData.js"],"names":["input","props","inputEl","inputClasses","classes","InputEl","invalid","shouldValidate","touched","push","Invalid","validationMsg","className","invalidMsg","valueType","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","initialOrderForm","name","type","placeholder","validation","required","valid","street","zipcode","minLength","mixLength","country","email","isEmail","deliveryMethod","ContactData","useState","orderForm","setOrderForm","formIsvalid","setFormIsvalid","formArray","key","id","config","form","formEl","toUpperCase","e","updatedFormEl","updateObject","target","checkValidity","updatedOrderForm","inputId","inputChangeHandler","disabled","loading","onSubmit","preventDefault","formData","formElementId","order","ingredient","price","userId","onPurchaseStart","token","connect","state","burgerBuilder","ingredients","totalPrice","auth","dispatch","orderData","orderActions","withErrorHandling","axios"],"mappings":"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","file":"static/js/4.5de09575.chunk.js","sourcesContent":["import classes from './Input.module.css';\r\nimport React from 'react';\r\n\r\nconst input = (props) => {\r\n  let inputEl = null;\r\n  const inputClasses = [classes.InputEl];\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n  let validationMsg = null;\r\n  if (props.invalid && props.touched) {\r\n    validationMsg = (\r\n      <small className={classes.validationMsg}>\r\n        {props.invalidMsg !== null\r\n          ? props.invalidMsg\r\n          : `Please enter valid ${props.valueType}`}\r\n      </small>\r\n    );\r\n  }\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputEl = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputEl = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      // inputEl = <select className={classes.Select}>{selectOption}</select>;\r\n      inputEl = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}>\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputEl = (\r\n        <input\r\n          className={classes.InputEl}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputEl}\r\n      {validationMsg}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1VLM8\",\"InputEl\":\"Input_InputEl__2gEuY\",\"Label\":\"Input_Label__23MFL\",\"Select\":\"Input_Select__1jiG5\",\"Invalid\":\"Input_Invalid__1vR_I\",\"validationMsg\":\"Input_validationMsg__34l9T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__1Jiw_\",\"Input\":\"ContactData_Input__f_Pnn\"};","import React, { useState } from 'react';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Input from '../../components/UI/Input/Input';\r\nimport { connect } from 'react-redux';\r\nimport * as orderActions from '../../store/actions/index';\r\nimport axios from '../../axios-orders';\r\nimport withErrorHandling from '../../hoc/withErrorHandling/withErrorHandling';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nconst initialOrderForm = {\r\n  name: {\r\n    elementType: 'input',\r\n    elementConfig: {\r\n      type: 'text',\r\n      placeholder: 'Your Name',\r\n    },\r\n    value: '',\r\n    touched: false,\r\n    validation: {\r\n      required: true,\r\n    },\r\n    valid: false,\r\n  },\r\n  street: {\r\n    elementType: 'input',\r\n    elementConfig: {\r\n      type: 'text',\r\n      placeholder: 'Your Street',\r\n    },\r\n    value: '',\r\n    touched: false,\r\n    validation: {\r\n      required: true,\r\n    },\r\n    valid: false,\r\n  },\r\n  zipcode: {\r\n    elementType: 'input',\r\n    elementConfig: {\r\n      type: 'text',\r\n      placeholder: 'ZIP Code',\r\n    },\r\n    value: '',\r\n    touched: false,\r\n    validation: {\r\n      required: true,\r\n      minLength: 5,\r\n      mixLength: 5,\r\n    },\r\n    valid: false,\r\n    invalidMsg: 'Please Enter 5 chars',\r\n  },\r\n\r\n  country: {\r\n    elementType: 'input',\r\n    elementConfig: {\r\n      type: 'text',\r\n      placeholder: 'Your Country',\r\n    },\r\n    value: '',\r\n    touched: false,\r\n    validation: {\r\n      required: true,\r\n    },\r\n    valid: false,\r\n  },\r\n  email: {\r\n    elementType: 'input',\r\n    elementConfig: {\r\n      type: 'email',\r\n      placeholder: 'Your Email',\r\n    },\r\n    value: '',\r\n    touched: false,\r\n    validation: {\r\n      required: true,\r\n      isEmail: true,\r\n    },\r\n    valid: false,\r\n    invalidMsg: 'Your email is not valid',\r\n  },\r\n\r\n  deliveryMethod: {\r\n    elementType: 'select',\r\n    elementConfig: {\r\n      options: [\r\n        { value: 'fastest', displayValue: 'Fastest' },\r\n        { value: 'cheapest', displayValue: 'Cheapest' },\r\n      ],\r\n    },\r\n    value: 'fastest',\r\n    validation: {},\r\n    valid: true,\r\n  },\r\n};\r\n\r\nexport const ContactData = (props) => {\r\n  const [orderForm, setOrderForm] = useState(initialOrderForm);\r\n  const [formIsvalid, setFormIsvalid] = useState(false);\r\n\r\n  const orderBtnHandler = (e) => {\r\n    e.preventDefault();\r\n    const formData = {};\r\n    for (let formElementId in orderForm) {\r\n      formData[formElementId] = orderForm[formElementId].value;\r\n    }\r\n    const order = {\r\n      ingredient: props.ingredient,\r\n      price: props.price,\r\n      formData: formData,\r\n      userId: props.userId,\r\n    };\r\n    props.onPurchaseStart(order, props.token);\r\n  };\r\n\r\n  const inputChangeHandler = (e, id) => {\r\n    const updatedFormEl = updateObject(orderForm[id], {\r\n      value: e.target.value,\r\n      valid: checkValidity(e.target.value, orderForm[id].validation),\r\n      touched: true,\r\n    });\r\n\r\n    const updatedOrderForm = updateObject(orderForm, {\r\n      [id]: updatedFormEl,\r\n    });\r\n\r\n    let formIsvalid = true;\r\n    for (let inputId in updatedOrderForm) {\r\n      formIsvalid = updatedOrderForm[inputId].valid && formIsvalid;\r\n    }\r\n    setOrderForm(updatedOrderForm);\r\n    setFormIsvalid(formIsvalid);\r\n  };\r\n\r\n  const formArray = [];\r\n  for (let key in orderForm) {\r\n    formArray.push({\r\n      id: key,\r\n      config: orderForm[key],\r\n    });\r\n  }\r\n  let form = (\r\n    <div className={classes.ContactData}>\r\n      {formArray.map((formEl) => {\r\n        return (\r\n          <Input\r\n            key={formEl.id}\r\n            label={formEl.id.toUpperCase()}\r\n            elementConfig={formEl.config.elementConfig}\r\n            elementType={formEl.config.elementType}\r\n            value={formEl.config.value}\r\n            invalid={!formEl.config.valid}\r\n            shouldValidate={formEl.config.validation}\r\n            touched={formEl.config.touched}\r\n            valueType={formEl.id}\r\n            invalidMsg={\r\n              formEl.config.invalidMsg ? formEl.config.invalidMsg : null\r\n            }\r\n            changed={(e) => inputChangeHandler(e, formEl.id)}\r\n          />\r\n        );\r\n      })}\r\n      <Button disabled={!formIsvalid} type='Success'>\r\n        ORDER\r\n      </Button>\r\n    </div>\r\n  );\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n  return <form onSubmit={orderBtnHandler}>{form}</form>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ingredient: state.burgerBuilder.ingredients,\r\n    price: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onPurchaseStart: (orderData, token) =>\r\n      dispatch(orderActions.purchaseBurger(orderData, token)),\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandling(ContactData, axios));\r\n"],"sourceRoot":""}