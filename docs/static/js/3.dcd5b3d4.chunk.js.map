{"version":3,"sources":["components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Auth/Auth.module.scss","components/Auth/Auth.js"],"names":["input","props","inputEl","inputClasses","classes","InputEl","invalid","shouldValidate","touched","push","Invalid","validationMsg","className","invalidMsg","valueType","elementType","join","elementConfig","value","onChange","changed","options","map","option","displayValue","Input","Label","label","module","exports","initialState","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","maxLength","isSignUp","contactReducer","currentState","action","updateObject","id","checkValidity","Error","connect","state","loading","auth","error","isAuthenticated","token","authRedirectPath","buildingBurger","burgerBuilder","building","dispatch","onAuth","actions","onSetAuthRedirectPath","useReducer","contactState","useEffect","formArray","key","config","form","formEl","toUpperCase","e","target","inputChangeHandler","errorMsg","ErrorMsg","message","redirectOnAuth","to","formHeader","FormHeader","Auth","onSubmit","preventDefault","clicked"],"mappings":"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","file":"static/js/3.dcd5b3d4.chunk.js","sourcesContent":["import classes from './Input.module.css';\r\nimport React from 'react';\r\n\r\nconst input = (props) => {\r\n  let inputEl = null;\r\n  const inputClasses = [classes.InputEl];\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(classes.Invalid);\r\n  }\r\n  let validationMsg = null;\r\n  if (props.invalid && props.touched) {\r\n    validationMsg = (\r\n      <small className={classes.validationMsg}>\r\n        {props.invalidMsg !== null\r\n          ? props.invalidMsg\r\n          : `Please enter valid ${props.valueType}`}\r\n      </small>\r\n    );\r\n  }\r\n  switch (props.elementType) {\r\n    case 'input':\r\n      inputEl = (\r\n        <input\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'textarea':\r\n      inputEl = (\r\n        <textarea\r\n          className={inputClasses.join(' ')}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n      break;\r\n    case 'select':\r\n      // inputEl = <select className={classes.Select}>{selectOption}</select>;\r\n      inputEl = (\r\n        <select\r\n          className={inputClasses.join(' ')}\r\n          value={props.value}\r\n          onChange={props.changed}>\r\n          {props.elementConfig.options.map((option) => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputEl = (\r\n        <input\r\n          className={classes.InputEl}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n          onChange={props.changed}\r\n        />\r\n      );\r\n  }\r\n  return (\r\n    <div className={classes.Input}>\r\n      <label className={classes.Label}>{props.label}</label>\r\n      {inputEl}\r\n      {validationMsg}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1VLM8\",\"InputEl\":\"Input_InputEl__2gEuY\",\"Label\":\"Input_Label__23MFL\",\"Select\":\"Input_Select__1jiG5\",\"Invalid\":\"Input_Invalid__1vR_I\",\"validationMsg\":\"Input_validationMsg__34l9T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1IpFk\",\"Input\":\"Auth_Input__2iKDu\",\"ErrorMsg\":\"Auth_ErrorMsg__N49Zy\",\"FormHeader\":\"Auth_FormHeader__2GJUP\"};","import React, { useEffect, useReducer } from 'react';\r\nimport Input from '../UI/Input/Input';\r\nimport Button from '../UI/Button/Button';\r\nimport classes from './Auth.module.scss';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nconst initialState = {\r\n  controls: {\r\n    email: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'email',\r\n        placeholder: 'Your Email',\r\n      },\r\n      value: '',\r\n      touched: false,\r\n      validation: {\r\n        required: true,\r\n        isEmail: true,\r\n      },\r\n      valid: false,\r\n      invalidMsg: 'Your email is not valid',\r\n    },\r\n\r\n    password: {\r\n      elementType: 'input',\r\n      elementConfig: {\r\n        type: 'password',\r\n        placeholder: 'Your password',\r\n      },\r\n      value: '',\r\n      touched: false,\r\n      validation: {\r\n        required: true,\r\n        minLength: 6,\r\n        maxLength: 10,\r\n      },\r\n      valid: false,\r\n      invalidMsg: 'Your password must be more than 6 characters',\r\n    },\r\n  },\r\n  isSignUp: true,\r\n};\r\n\r\nconst contactReducer = (currentState, action) => {\r\n  switch (action.type) {\r\n    case 'SWITCH_HANDLER':\r\n      return { ...currentState, isSignUp: !currentState.isSignUp };\r\n    case 'INPUT_CHANGE_HANDLER':\r\n      return {\r\n        ...currentState,\r\n        controls: updateObject(currentState.controls, {\r\n          [action.id]: updateObject(currentState.controls[action.id], {\r\n            value: action.value,\r\n            valid: checkValidity(\r\n              action.value,\r\n              currentState.controls[action.id].validation\r\n            ),\r\n            touched: true,\r\n          }),\r\n        }),\r\n      };\r\n    default:\r\n      throw new Error('should not come here!');\r\n  }\r\n};\r\n\r\nconst Auth = (props) => {\r\n  const [contactState, dispatch] = useReducer(contactReducer, initialState);\r\n\r\n  const { onSetAuthRedirectPath, isAuthenticated, buildingBurger } = props;\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated && !buildingBurger) {\r\n      onSetAuthRedirectPath();\r\n    }\r\n  }, [onSetAuthRedirectPath, isAuthenticated, buildingBurger]);\r\n\r\n  const switchSignUpHandler = () => {\r\n    dispatch({ type: 'SWITCH_HANDLER' });\r\n  };\r\n\r\n  const inputChangeHandler = (e, id) => {\r\n    dispatch({ type: 'INPUT_CHANGE_HANDLER', value: e.target.value, id });\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    props.onAuth(\r\n      contactState.controls.email.value,\r\n      contactState.controls.password.value,\r\n      contactState.isSignUp\r\n    );\r\n  };\r\n\r\n  const formArray = [];\r\n  for (let key in contactState.controls) {\r\n    formArray.push({\r\n      id: key,\r\n      config: contactState.controls[key],\r\n    });\r\n  }\r\n  let form = formArray.map((formEl) => {\r\n    return (\r\n      <Input\r\n        key={formEl.id}\r\n        label={formEl.id.toUpperCase()}\r\n        elementConfig={formEl.config.elementConfig}\r\n        elementType={formEl.config.elementType}\r\n        value={formEl.config.value}\r\n        invalid={!formEl.config.valid}\r\n        shouldValidate={formEl.config.validation}\r\n        touched={formEl.config.touched}\r\n        valueType={formEl.id}\r\n        invalidMsg={formEl.config.invalidMsg ? formEl.config.invalidMsg : null}\r\n        changed={(e) => inputChangeHandler(e, formEl.id)}\r\n      />\r\n    );\r\n  });\r\n  if (props.loading) {\r\n    form = <Spinner />;\r\n  }\r\n  let errorMsg = null;\r\n  if (props.error) {\r\n    errorMsg = <p className={classes.ErrorMsg}>{props.error.message}</p>;\r\n  }\r\n  let redirectOnAuth = null;\r\n  if (props.isAuthenticated) {\r\n    redirectOnAuth = <Redirect to={props.authRedirectPath} />;\r\n  }\r\n  let formHeader = <h1 className={classes.FormHeader}>SIGN UP</h1>;\r\n  if (!contactState.isSignUp) {\r\n    formHeader = <h1 className={classes.FormHeader}>SIGN IN</h1>;\r\n  }\r\n\r\n  return (\r\n    <div className={classes.Auth}>\r\n      {redirectOnAuth}\r\n      {formHeader}\r\n      {errorMsg}\r\n      <form onSubmit={submitHandler}>\r\n        {form}\r\n        <Button type='Success'>SUBMIT</Button>\r\n      </form>\r\n      <Button clicked={switchSignUpHandler} type='Danger'>\r\n        Switch to {contactState.isSignUp ? 'SignIn' : 'SignUp'}\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuthenticated: state.auth.token !== null,\r\n    authRedirectPath: state.auth.authRedirectPath,\r\n    buildingBurger: state.burgerBuilder.building,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) =>\r\n      dispatch(actions.auth(email, password, isSignUp)),\r\n    onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/')),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}